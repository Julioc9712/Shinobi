docker-latest-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: ""
    EXCLUDE_DB: "false"
    DOCKER_FILE: "Dockerfile"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-latest-no-db-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: ""
    EXCLUDE_DB: "true"
    DOCKER_FILE: "Dockerfile"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-arm32v7-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "arm32v7"
    EXCLUDE_DB: "false"
    DOCKER_FILE: "Dockerfile.arm32v7"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-arm32v7-no-db-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "arm32v7"
    EXCLUDE_DB: "true"
    DOCKER_FILE: "Dockerfile.arm32v7"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-arm64v8-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "arm64v8"
    EXCLUDE_DB: "false"
    DOCKER_FILE: "Dockerfile.arm64v8"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    # - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
    #  when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-arm64v8-no-db-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "arm64v8"
    EXCLUDE_DB: "true"
    DOCKER_FILE: "Dockerfile.arm64v8"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    # - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
    #  when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-nvidia-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "nvidia"
    EXCLUDE_DB: "false"
    DOCKER_FILE: "Dockerfile.nvidia"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE

docker-nvidia-no-db-build:
  image: docker:latest
  stage: build
  variables:
    ARCH_TYPE: "nvidia"
    EXCLUDE_DB: "true"
    DOCKER_FILE: "Dockerfile.nvidia"
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      export BRANCH_PREFIX="latest" ; 
      export NO_DB_SUFIX="" ;
      export BRANCH_SEP="" ;

      if [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        export BRANCH_PREFIX="${CI_COMMIT_REF_SLUG}" ;
      fi 

      if [[ "${EXCLUDE_DB}" == "true" ]]; then
        export NO_DB_SUFIX="-no-db" ;
      fi

      if [[ "${ARCH_TYPE}" != "" ]]; then
        export BRANCH_SEP="-" ;
      fi

      export IMAGE_NAME="$CI_REGISTRY_IMAGE:${BRANCH_PREFIX}${BRANCH_SEP}${ARCH_TYPE}${NO_DB_SUFIX}" ;
      echo "Running on branch '${CI_COMMIT_BRANCH}', Image: ${IMAGE_NAME}" ;

    - docker build --pull --build-arg VAR_EXCLUDE_DB="${EXCLUDE_DB}" -t "${IMAGE_NAME}" . -f "${DOCKER_FILE}"
    - docker push "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - $DOCKER_FILE
